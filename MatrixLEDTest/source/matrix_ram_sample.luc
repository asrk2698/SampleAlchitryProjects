module matrix_ram_sample #(
  // 32 by 64 LED matrix, separated into top-16 rows and bottom 16-rows
  // both halves row i are written together for all rows 0 to 15 in a rapid loop 
  ADDRESS_SIZE = 4 : ADDRESS_SIZE > 0, //width of the address field (ABCD signals for matrix_led) 
  MATRIX_WIDTH = 64 : MATRIX_WIDTH > 0 //number of LEDs per row in the matrix
  )(
    input clk,  // clock
    input rst,
    input row_address[ADDRESS_SIZE],
    input col_address[$clog2(MATRIX_WIDTH)],
    output top_out[3], //gbr
    output bottom_out[3] //gbr
  ) {

     const ROW_DATA_BOTTOM = {3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100,
                    3b100, 3b100, 3b100, 3b100}; // 64 by 3 : B0 G0 R0  per entry, index[0] is at the bottom right
  
       const ROW_DATA_TOP = {3b001, 3b001, 3b001, 3b001,
                    3b001, 3b001, 3b001, 3b001,
                    3b001, 3b001, 3b001, 3b001,
                    3b001, 3b001, 3b001, 3b001,
                    3b001, 3b001, 3b001, 3b001,
                    3b111, 3b110, 3b110, 3b110,
                    3b110, 3b110, 3b110, 3b110,
                    3b110, 3b111, 3b110, 3b110,
                    3b110, 3b110, 3b110, 3b110,
                    3b110, 3b110, 3b111, 3b110,
                    3b110, 3b110, 3b110, 3b110,
                    3b110, 3b110, 3b110, 3b110,
                    3b110, 3b110, 3b110, 3b110,
                    3b110, 3b110, 3b110, 3b110,
                    3b110, 3b110, 3b110, 3b110,
                    3b110, 3b110, 3b110, 3b110}; // 64 by 3 : B G R  per entry, index[0] is at the bottom right
      
    dff ram_writer_address[$clog2(MATRIX_WIDTH*$pow(ADDRESS_SIZE, 2))](#INIT(0), .clk(clk), .rst(rst));
    simple_ram top_ram(#SIZE(3), #DEPTH(MATRIX_WIDTH*$pow(ADDRESS_SIZE, 2)), .clk(clk));
    simple_ram bottom_ram(#SIZE(3), #DEPTH(MATRIX_WIDTH*$pow(ADDRESS_SIZE, 2)), .clk(clk));
  
    fsm ram_state(.clk(clk)) = {LOAD_ADDRESS, LOAD_WAIT, LOOP};
  
  always {
  
      top_out = top_ram.read_data;
      bottom_out = bottom_ram.read_data;
      
      top_ram.address = row_address * col_address;
      bottom_ram.address = row_address * col_address;
      
      top_ram.write_data = 0;
      bottom_ram.write_data = 0;
      top_ram.write_en = 0;
      bottom_ram.write_en = 0;
    
      case(ram_state.q){
          ram_state.LOAD_ADDRESS:
            top_ram.address = ram_writer_address.q;
            bottom_ram.address = ram_writer_address.q;
            top_ram.write_data = ROW_DATA_TOP[ram_writer_address.q];
            bottom_ram.write_data = ROW_DATA_BOTTOM[ram_writer_address.q];
            top_ram.write_en = b1;
            bottom_ram.write_en = b1;
            ram_state.d = ram_state.LOAD_WAIT;
            if (&ram_writer_address.q == 1){
                ram_state.d = ram_state.LOOP;
            }
          
          ram_state.LOAD_WAIT:
            //advance write address by 1
            ram_writer_address.d = ram_writer_address.q + 1;
            ram_state.d = ram_state.LOAD_ADDRESS;
         
          ram_state.LOOP:
            ram_state.d = ram_state.LOOP;
    }
      
      
   
     
  }
}
